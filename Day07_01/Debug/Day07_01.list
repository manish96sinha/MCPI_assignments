
Day07_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000efc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800108c  0800108c  0000208c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010d4  080010d4  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080010d4  080010d4  000020d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010dc  080010dc  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010dc  080010dc  000020dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010e0  080010e0  000020e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080010e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000178  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000196b  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006fa  00000000  00000000  000049e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  000050e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b7  00000000  00000000  00005200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014f8  00000000  00000000  000052b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ad9  00000000  00000000  000067af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c353  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000945db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007bc  00000000  00000000  00094620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  00094ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  00094dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001074 	.word	0x08001074

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001074 	.word	0x08001074

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
	char str[16];
		int count = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
		SystemInit();
 80002ca:	f000 f8f1 	bl	80004b0 <SystemInit>
		SwitchInit(SWITCH);
 80002ce:	2000      	movs	r0, #0
 80002d0:	f000 f842 	bl	8000358 <SwitchInit>
		UartInit(BAUD_9600);
 80002d4:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002d8:	f000 f93c 	bl	8000554 <UartInit>
		UartPuts("Counting \r\n");
 80002dc:	480d      	ldr	r0, [pc, #52]	@ (8000314 <main+0x54>)
 80002de:	f000 f9a9 	bl	8000634 <UartPuts>
		while(1) {
		while(exti0_flag == 0)
 80002e2:	bf00      	nop
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <main+0x58>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0fb      	beq.n	80002e4 <main+0x24>
				;
			count++;
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	3301      	adds	r3, #1
 80002f0:	617b      	str	r3, [r7, #20]
			DelayMs(50);
 80002f2:	2032      	movs	r0, #50	@ 0x32
 80002f4:	f7ff ffbc 	bl	8000270 <DelayMs>
			sprintf(str,"   %d",count);
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	697a      	ldr	r2, [r7, #20]
 80002fc:	4907      	ldr	r1, [pc, #28]	@ (800031c <main+0x5c>)
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fa20 	bl	8000744 <siprintf>
			UartPuts(str);
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f994 	bl	8000634 <UartPuts>
			exti0_flag = 0;
 800030c:	4b02      	ldr	r3, [pc, #8]	@ (8000318 <main+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
		while(exti0_flag == 0)
 8000312:	e7e6      	b.n	80002e2 <main+0x22>
 8000314:	0800108c 	.word	0x0800108c
 8000318:	20000070 	.word	0x20000070
 800031c:	08001098 	.word	0x08001098

08000320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	2b00      	cmp	r3, #0
 8000330:	db0b      	blt.n	800034a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	f003 021f 	and.w	r2, r3, #31
 8000338:	4906      	ldr	r1, [pc, #24]	@ (8000354 <__NVIC_EnableIRQ+0x34>)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	095b      	lsrs	r3, r3, #5
 8000340:	2001      	movs	r0, #1
 8000342:	fa00 f202 	lsl.w	r2, r0, r2
 8000346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100

08000358 <SwitchInit>:
 *  Created on: Apr 1, 2024
 *      Author: manish
 */
#include "switch.h"

void SwitchInit(uint32_t pin) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SwitchInit+0xb4>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a29      	ldr	r2, [pc, #164]	@ (800040c <SwitchInit+0xb4>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30

	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800036c:	4b28      	ldr	r3, [pc, #160]	@ (8000410 <SwitchInit+0xb8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	0052      	lsls	r2, r2, #1
 8000374:	3201      	adds	r2, #1
 8000376:	2101      	movs	r1, #1
 8000378:	4091      	lsls	r1, r2
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	2001      	movs	r0, #1
 8000380:	fa00 f202 	lsl.w	r2, r0, r2
 8000384:	430a      	orrs	r2, r1
 8000386:	43d2      	mvns	r2, r2
 8000388:	4611      	mov	r1, r2
 800038a:	4a21      	ldr	r2, [pc, #132]	@ (8000410 <SwitchInit+0xb8>)
 800038c:	400b      	ands	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000390:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <SwitchInit+0xb8>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	3201      	adds	r2, #1
 800039a:	2101      	movs	r1, #1
 800039c:	4091      	lsls	r1, r2
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	0052      	lsls	r2, r2, #1
 80003a2:	2001      	movs	r0, #1
 80003a4:	fa00 f202 	lsl.w	r2, r0, r2
 80003a8:	430a      	orrs	r2, r1
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a18      	ldr	r2, [pc, #96]	@ (8000410 <SwitchInit+0xb8>)
 80003b0:	400b      	ands	r3, r1
 80003b2:	6093      	str	r3, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80003b4:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <SwitchInit+0xb8>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	3201      	adds	r2, #1
 80003be:	2101      	movs	r1, #1
 80003c0:	4091      	lsls	r1, r2
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	0052      	lsls	r2, r2, #1
 80003c6:	2001      	movs	r0, #1
 80003c8:	fa00 f202 	lsl.w	r2, r0, r2
 80003cc:	430a      	orrs	r2, r1
 80003ce:	43d2      	mvns	r2, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <SwitchInit+0xb8>)
 80003d4:	400b      	ands	r3, r1
 80003d6:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <SwitchInit+0xbc>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <SwitchInit+0xbc>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH);
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <SwitchInit+0xbc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <SwitchInit+0xbc>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <SwitchInit+0xc0>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <SwitchInit+0xc0>)
 80003f6:	f023 030f 	bic.w	r3, r3, #15
 80003fa:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 80003fc:	2006      	movs	r0, #6
 80003fe:	f7ff ff8f 	bl	8000320 <__NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800
 8000410:	40020000 	.word	0x40020000
 8000414:	40013c00 	.word	0x40013c00
 8000418:	40013800 	.word	0x40013800

0800041c <EXTI0_IRQHandler>:
	return 0;
}

volatile int exti0_flag = 0;

void EXTI0_IRQHandler(void) {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH);
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <EXTI0_IRQHandler+0x20>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a05      	ldr	r2, [pc, #20]	@ (800043c <EXTI0_IRQHandler+0x20>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 800042c:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <EXTI0_IRQHandler+0x24>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40013c00 	.word	0x40013c00
 8000440:	20000070 	.word	0x20000070

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 f986 	bl	8000784 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20020000 	.word	0x20020000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	20000074 	.word	0x20000074
 80004ac:	200001d0 	.word	0x200001d0

080004b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  DWT_Init();
 80004b4:	f000 f802 	bl	80004bc <DWT_Init>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <DWT_Init+0x58>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a13      	ldr	r2, [pc, #76]	@ (8000514 <DWT_Init+0x58>)
 80004c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004ca:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <DWT_Init+0x58>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <DWT_Init+0x58>)
 80004d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <DWT_Init+0x5c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <DWT_Init+0x5c>)
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <DWT_Init+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <DWT_Init+0x5c>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <DWT_Init+0x5c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004f6:	bf00      	nop
    __ASM volatile ("NOP");
 80004f8:	bf00      	nop
    __ASM volatile ("NOP");
 80004fa:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <DWT_Init+0x5c>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf0c      	ite	eq
 8000504:	2301      	moveq	r3, #1
 8000506:	2300      	movne	r3, #0
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000edf0 	.word	0xe000edf0
 8000518:	e0001000 	.word	0xe0001000

0800051c <__NVIC_EnableIRQ>:
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	2b00      	cmp	r3, #0
 800052c:	db0b      	blt.n	8000546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f003 021f 	and.w	r2, r3, #31
 8000534:	4906      	ldr	r1, [pc, #24]	@ (8000550 <__NVIC_EnableIRQ+0x34>)
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	095b      	lsrs	r3, r3, #5
 800053c:	2001      	movs	r0, #1
 800053e:	fa00 f202 	lsl.w	r2, r0, r2
 8000542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800055c:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <UartInit+0xd4>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	4a31      	ldr	r2, [pc, #196]	@ (8000628 <UartInit+0xd4>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000568:	4b30      	ldr	r3, [pc, #192]	@ (800062c <UartInit+0xd8>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a2f      	ldr	r2, [pc, #188]	@ (800062c <UartInit+0xd8>)
 800056e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000572:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000574:	4b2d      	ldr	r3, [pc, #180]	@ (800062c <UartInit+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2c      	ldr	r2, [pc, #176]	@ (800062c <UartInit+0xd8>)
 800057a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800057e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000580:	4b2a      	ldr	r3, [pc, #168]	@ (800062c <UartInit+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a29      	ldr	r2, [pc, #164]	@ (800062c <UartInit+0xd8>)
 8000586:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800058a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <UartInit+0xd8>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4a26      	ldr	r2, [pc, #152]	@ (800062c <UartInit+0xd8>)
 8000592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000596:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000598:	4b24      	ldr	r3, [pc, #144]	@ (800062c <UartInit+0xd8>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a23      	ldr	r2, [pc, #140]	@ (800062c <UartInit+0xd8>)
 800059e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005a2:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <UartInit+0xd8>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a20      	ldr	r2, [pc, #128]	@ (800062c <UartInit+0xd8>)
 80005aa:	f023 030c 	bic.w	r3, r3, #12
 80005ae:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80005b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000628 <UartInit+0xd4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000628 <UartInit+0xd4>)
 80005b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ba:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80005bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <UartInit+0xdc>)
 80005be:	220c      	movs	r2, #12
 80005c0:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0x00000000;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <UartInit+0xdc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 80005c8:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <UartInit+0xdc>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]

	switch(baud) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80005d4:	d016      	beq.n	8000604 <UartInit+0xb0>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80005dc:	d816      	bhi.n	800060c <UartInit+0xb8>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80005e4:	d004      	beq.n	80005f0 <UartInit+0x9c>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80005ec:	d005      	beq.n	80005fa <UartInit+0xa6>
 80005ee:	e00d      	b.n	800060c <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <UartInit+0xdc>)
 80005f2:	f240 6283 	movw	r2, #1667	@ 0x683
 80005f6:	609a      	str	r2, [r3, #8]
			break;
 80005f8:	e008      	b.n	800060c <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <UartInit+0xdc>)
 80005fc:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000600:	609a      	str	r2, [r3, #8]
			break;
 8000602:	e003      	b.n	800060c <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <UartInit+0xdc>)
 8000606:	228b      	movs	r2, #139	@ 0x8b
 8000608:	609a      	str	r2, [r3, #8]
			break;
 800060a:	bf00      	nop
	}

	NVIC_EnableIRQ(USART2_IRQn);
 800060c:	2026      	movs	r0, #38	@ 0x26
 800060e:	f7ff ff85 	bl	800051c <__NVIC_EnableIRQ>

	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <UartInit+0xdc>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <UartInit+0xdc>)
 8000618:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800061c:	60d3      	str	r3, [r2, #12]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000
 8000630:	40004400 	.word	0x40004400

08000634 <UartPuts>:

char *tx_string;
int tx_index = 0;
int tx_complete = 0;

void UartPuts(char str[]) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	tx_string = str;
 800063c:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <UartPuts+0x44>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <UartPuts+0x48>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_string[tx_index];
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <UartPuts+0x44>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <UartPuts+0x48>)
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	4413      	add	r3, r2
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <UartPuts+0x4c>)
 8000656:	605a      	str	r2, [r3, #4]
	tx_index++;
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <UartPuts+0x48>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a07      	ldr	r2, [pc, #28]	@ (800067c <UartPuts+0x48>)
 8000660:	6013      	str	r3, [r2, #0]

	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <UartPuts+0x4c>)
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <UartPuts+0x4c>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800066c:	60d3      	str	r3, [r2, #12]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000078 	.word	0x20000078
 800067c:	2000007c 	.word	0x2000007c
 8000680:	40004400 	.word	0x40004400

08000684 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0) {
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <USART2_IRQHandler+0x5c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000690:	2b00      	cmp	r3, #0
 8000692:	d021      	beq.n	80006d8 <USART2_IRQHandler+0x54>

		if(tx_string[tx_index] != '\0') {
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <USART2_IRQHandler+0x60>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <USART2_IRQHandler+0x64>)
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00d      	beq.n	80006c0 <USART2_IRQHandler+0x3c>
			USART2->DR = tx_string[tx_index];
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <USART2_IRQHandler+0x60>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <USART2_IRQHandler+0x64>)
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	4413      	add	r3, r2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <USART2_IRQHandler+0x5c>)
 80006b2:	605a      	str	r2, [r3, #4]
			tx_index++;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <USART2_IRQHandler+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <USART2_IRQHandler+0x64>)
 80006bc:	6013      	str	r3, [r2, #0]
			tx_string = NULL;
			tx_complete = 1;
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 80006be:	e00b      	b.n	80006d8 <USART2_IRQHandler+0x54>
			tx_string = NULL;
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <USART2_IRQHandler+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <USART2_IRQHandler+0x68>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <USART2_IRQHandler+0x5c>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <USART2_IRQHandler+0x5c>)
 80006d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40004400 	.word	0x40004400
 80006e4:	20000078 	.word	0x20000078
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	20000080 	.word	0x20000080

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f4:	f7ff fedc 	bl	80004b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	@ (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	@ (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071e:	f000 f837 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fdcd 	bl	80002c0 <main>

08000726 <LoopForever>:

LoopForever:
  b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000734:	080010e4 	.word	0x080010e4
  ldr r2, =_sbss
 8000738:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800073c:	200001cc 	.word	0x200001cc

08000740 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <siprintf>:
 8000744:	b40e      	push	{r1, r2, r3}
 8000746:	b500      	push	{lr}
 8000748:	b09c      	sub	sp, #112	@ 0x70
 800074a:	ab1d      	add	r3, sp, #116	@ 0x74
 800074c:	9002      	str	r0, [sp, #8]
 800074e:	9006      	str	r0, [sp, #24]
 8000750:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <siprintf+0x38>)
 8000756:	9107      	str	r1, [sp, #28]
 8000758:	9104      	str	r1, [sp, #16]
 800075a:	4909      	ldr	r1, [pc, #36]	@ (8000780 <siprintf+0x3c>)
 800075c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000760:	9105      	str	r1, [sp, #20]
 8000762:	6800      	ldr	r0, [r0, #0]
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	a902      	add	r1, sp, #8
 8000768:	f000 f98c 	bl	8000a84 <_svfiprintf_r>
 800076c:	9b02      	ldr	r3, [sp, #8]
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	b01c      	add	sp, #112	@ 0x70
 8000774:	f85d eb04 	ldr.w	lr, [sp], #4
 8000778:	b003      	add	sp, #12
 800077a:	4770      	bx	lr
 800077c:	20000004 	.word	0x20000004
 8000780:	ffff0208 	.word	0xffff0208

08000784 <__errno>:
 8000784:	4b01      	ldr	r3, [pc, #4]	@ (800078c <__errno+0x8>)
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000004 	.word	0x20000004

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4d0d      	ldr	r5, [pc, #52]	@ (80007c8 <__libc_init_array+0x38>)
 8000794:	4c0d      	ldr	r4, [pc, #52]	@ (80007cc <__libc_init_array+0x3c>)
 8000796:	1b64      	subs	r4, r4, r5
 8000798:	10a4      	asrs	r4, r4, #2
 800079a:	2600      	movs	r6, #0
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	4d0b      	ldr	r5, [pc, #44]	@ (80007d0 <__libc_init_array+0x40>)
 80007a2:	4c0c      	ldr	r4, [pc, #48]	@ (80007d4 <__libc_init_array+0x44>)
 80007a4:	f000 fc66 	bl	8001074 <_init>
 80007a8:	1b64      	subs	r4, r4, r5
 80007aa:	10a4      	asrs	r4, r4, #2
 80007ac:	2600      	movs	r6, #0
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	080010dc 	.word	0x080010dc
 80007cc:	080010dc 	.word	0x080010dc
 80007d0:	080010dc 	.word	0x080010dc
 80007d4:	080010e0 	.word	0x080010e0

080007d8 <__retarget_lock_acquire_recursive>:
 80007d8:	4770      	bx	lr

080007da <__retarget_lock_release_recursive>:
 80007da:	4770      	bx	lr

080007dc <_free_r>:
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4605      	mov	r5, r0
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d041      	beq.n	8000868 <_free_r+0x8c>
 80007e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007e8:	1f0c      	subs	r4, r1, #4
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bfb8      	it	lt
 80007ee:	18e4      	addlt	r4, r4, r3
 80007f0:	f000 f8e0 	bl	80009b4 <__malloc_lock>
 80007f4:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <_free_r+0x90>)
 80007f6:	6813      	ldr	r3, [r2, #0]
 80007f8:	b933      	cbnz	r3, 8000808 <_free_r+0x2c>
 80007fa:	6063      	str	r3, [r4, #4]
 80007fc:	6014      	str	r4, [r2, #0]
 80007fe:	4628      	mov	r0, r5
 8000800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000804:	f000 b8dc 	b.w	80009c0 <__malloc_unlock>
 8000808:	42a3      	cmp	r3, r4
 800080a:	d908      	bls.n	800081e <_free_r+0x42>
 800080c:	6820      	ldr	r0, [r4, #0]
 800080e:	1821      	adds	r1, r4, r0
 8000810:	428b      	cmp	r3, r1
 8000812:	bf01      	itttt	eq
 8000814:	6819      	ldreq	r1, [r3, #0]
 8000816:	685b      	ldreq	r3, [r3, #4]
 8000818:	1809      	addeq	r1, r1, r0
 800081a:	6021      	streq	r1, [r4, #0]
 800081c:	e7ed      	b.n	80007fa <_free_r+0x1e>
 800081e:	461a      	mov	r2, r3
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	b10b      	cbz	r3, 8000828 <_free_r+0x4c>
 8000824:	42a3      	cmp	r3, r4
 8000826:	d9fa      	bls.n	800081e <_free_r+0x42>
 8000828:	6811      	ldr	r1, [r2, #0]
 800082a:	1850      	adds	r0, r2, r1
 800082c:	42a0      	cmp	r0, r4
 800082e:	d10b      	bne.n	8000848 <_free_r+0x6c>
 8000830:	6820      	ldr	r0, [r4, #0]
 8000832:	4401      	add	r1, r0
 8000834:	1850      	adds	r0, r2, r1
 8000836:	4283      	cmp	r3, r0
 8000838:	6011      	str	r1, [r2, #0]
 800083a:	d1e0      	bne.n	80007fe <_free_r+0x22>
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	6053      	str	r3, [r2, #4]
 8000842:	4408      	add	r0, r1
 8000844:	6010      	str	r0, [r2, #0]
 8000846:	e7da      	b.n	80007fe <_free_r+0x22>
 8000848:	d902      	bls.n	8000850 <_free_r+0x74>
 800084a:	230c      	movs	r3, #12
 800084c:	602b      	str	r3, [r5, #0]
 800084e:	e7d6      	b.n	80007fe <_free_r+0x22>
 8000850:	6820      	ldr	r0, [r4, #0]
 8000852:	1821      	adds	r1, r4, r0
 8000854:	428b      	cmp	r3, r1
 8000856:	bf04      	itt	eq
 8000858:	6819      	ldreq	r1, [r3, #0]
 800085a:	685b      	ldreq	r3, [r3, #4]
 800085c:	6063      	str	r3, [r4, #4]
 800085e:	bf04      	itt	eq
 8000860:	1809      	addeq	r1, r1, r0
 8000862:	6021      	streq	r1, [r4, #0]
 8000864:	6054      	str	r4, [r2, #4]
 8000866:	e7ca      	b.n	80007fe <_free_r+0x22>
 8000868:	bd38      	pop	{r3, r4, r5, pc}
 800086a:	bf00      	nop
 800086c:	200001c8 	.word	0x200001c8

08000870 <sbrk_aligned>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	4e0f      	ldr	r6, [pc, #60]	@ (80008b0 <sbrk_aligned+0x40>)
 8000874:	460c      	mov	r4, r1
 8000876:	6831      	ldr	r1, [r6, #0]
 8000878:	4605      	mov	r5, r0
 800087a:	b911      	cbnz	r1, 8000882 <sbrk_aligned+0x12>
 800087c:	f000 fba6 	bl	8000fcc <_sbrk_r>
 8000880:	6030      	str	r0, [r6, #0]
 8000882:	4621      	mov	r1, r4
 8000884:	4628      	mov	r0, r5
 8000886:	f000 fba1 	bl	8000fcc <_sbrk_r>
 800088a:	1c43      	adds	r3, r0, #1
 800088c:	d103      	bne.n	8000896 <sbrk_aligned+0x26>
 800088e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000892:	4620      	mov	r0, r4
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	1cc4      	adds	r4, r0, #3
 8000898:	f024 0403 	bic.w	r4, r4, #3
 800089c:	42a0      	cmp	r0, r4
 800089e:	d0f8      	beq.n	8000892 <sbrk_aligned+0x22>
 80008a0:	1a21      	subs	r1, r4, r0
 80008a2:	4628      	mov	r0, r5
 80008a4:	f000 fb92 	bl	8000fcc <_sbrk_r>
 80008a8:	3001      	adds	r0, #1
 80008aa:	d1f2      	bne.n	8000892 <sbrk_aligned+0x22>
 80008ac:	e7ef      	b.n	800088e <sbrk_aligned+0x1e>
 80008ae:	bf00      	nop
 80008b0:	200001c4 	.word	0x200001c4

080008b4 <_malloc_r>:
 80008b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008b8:	1ccd      	adds	r5, r1, #3
 80008ba:	f025 0503 	bic.w	r5, r5, #3
 80008be:	3508      	adds	r5, #8
 80008c0:	2d0c      	cmp	r5, #12
 80008c2:	bf38      	it	cc
 80008c4:	250c      	movcc	r5, #12
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	4606      	mov	r6, r0
 80008ca:	db01      	blt.n	80008d0 <_malloc_r+0x1c>
 80008cc:	42a9      	cmp	r1, r5
 80008ce:	d904      	bls.n	80008da <_malloc_r+0x26>
 80008d0:	230c      	movs	r3, #12
 80008d2:	6033      	str	r3, [r6, #0]
 80008d4:	2000      	movs	r0, #0
 80008d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009b0 <_malloc_r+0xfc>
 80008de:	f000 f869 	bl	80009b4 <__malloc_lock>
 80008e2:	f8d8 3000 	ldr.w	r3, [r8]
 80008e6:	461c      	mov	r4, r3
 80008e8:	bb44      	cbnz	r4, 800093c <_malloc_r+0x88>
 80008ea:	4629      	mov	r1, r5
 80008ec:	4630      	mov	r0, r6
 80008ee:	f7ff ffbf 	bl	8000870 <sbrk_aligned>
 80008f2:	1c43      	adds	r3, r0, #1
 80008f4:	4604      	mov	r4, r0
 80008f6:	d158      	bne.n	80009aa <_malloc_r+0xf6>
 80008f8:	f8d8 4000 	ldr.w	r4, [r8]
 80008fc:	4627      	mov	r7, r4
 80008fe:	2f00      	cmp	r7, #0
 8000900:	d143      	bne.n	800098a <_malloc_r+0xd6>
 8000902:	2c00      	cmp	r4, #0
 8000904:	d04b      	beq.n	800099e <_malloc_r+0xea>
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4639      	mov	r1, r7
 800090a:	4630      	mov	r0, r6
 800090c:	eb04 0903 	add.w	r9, r4, r3
 8000910:	f000 fb5c 	bl	8000fcc <_sbrk_r>
 8000914:	4581      	cmp	r9, r0
 8000916:	d142      	bne.n	800099e <_malloc_r+0xea>
 8000918:	6821      	ldr	r1, [r4, #0]
 800091a:	1a6d      	subs	r5, r5, r1
 800091c:	4629      	mov	r1, r5
 800091e:	4630      	mov	r0, r6
 8000920:	f7ff ffa6 	bl	8000870 <sbrk_aligned>
 8000924:	3001      	adds	r0, #1
 8000926:	d03a      	beq.n	800099e <_malloc_r+0xea>
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	442b      	add	r3, r5
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	f8d8 3000 	ldr.w	r3, [r8]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	bb62      	cbnz	r2, 8000990 <_malloc_r+0xdc>
 8000936:	f8c8 7000 	str.w	r7, [r8]
 800093a:	e00f      	b.n	800095c <_malloc_r+0xa8>
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	1b52      	subs	r2, r2, r5
 8000940:	d420      	bmi.n	8000984 <_malloc_r+0xd0>
 8000942:	2a0b      	cmp	r2, #11
 8000944:	d917      	bls.n	8000976 <_malloc_r+0xc2>
 8000946:	1961      	adds	r1, r4, r5
 8000948:	42a3      	cmp	r3, r4
 800094a:	6025      	str	r5, [r4, #0]
 800094c:	bf18      	it	ne
 800094e:	6059      	strne	r1, [r3, #4]
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	bf08      	it	eq
 8000954:	f8c8 1000 	streq.w	r1, [r8]
 8000958:	5162      	str	r2, [r4, r5]
 800095a:	604b      	str	r3, [r1, #4]
 800095c:	4630      	mov	r0, r6
 800095e:	f000 f82f 	bl	80009c0 <__malloc_unlock>
 8000962:	f104 000b 	add.w	r0, r4, #11
 8000966:	1d23      	adds	r3, r4, #4
 8000968:	f020 0007 	bic.w	r0, r0, #7
 800096c:	1ac2      	subs	r2, r0, r3
 800096e:	bf1c      	itt	ne
 8000970:	1a1b      	subne	r3, r3, r0
 8000972:	50a3      	strne	r3, [r4, r2]
 8000974:	e7af      	b.n	80008d6 <_malloc_r+0x22>
 8000976:	6862      	ldr	r2, [r4, #4]
 8000978:	42a3      	cmp	r3, r4
 800097a:	bf0c      	ite	eq
 800097c:	f8c8 2000 	streq.w	r2, [r8]
 8000980:	605a      	strne	r2, [r3, #4]
 8000982:	e7eb      	b.n	800095c <_malloc_r+0xa8>
 8000984:	4623      	mov	r3, r4
 8000986:	6864      	ldr	r4, [r4, #4]
 8000988:	e7ae      	b.n	80008e8 <_malloc_r+0x34>
 800098a:	463c      	mov	r4, r7
 800098c:	687f      	ldr	r7, [r7, #4]
 800098e:	e7b6      	b.n	80008fe <_malloc_r+0x4a>
 8000990:	461a      	mov	r2, r3
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	42a3      	cmp	r3, r4
 8000996:	d1fb      	bne.n	8000990 <_malloc_r+0xdc>
 8000998:	2300      	movs	r3, #0
 800099a:	6053      	str	r3, [r2, #4]
 800099c:	e7de      	b.n	800095c <_malloc_r+0xa8>
 800099e:	230c      	movs	r3, #12
 80009a0:	6033      	str	r3, [r6, #0]
 80009a2:	4630      	mov	r0, r6
 80009a4:	f000 f80c 	bl	80009c0 <__malloc_unlock>
 80009a8:	e794      	b.n	80008d4 <_malloc_r+0x20>
 80009aa:	6005      	str	r5, [r0, #0]
 80009ac:	e7d6      	b.n	800095c <_malloc_r+0xa8>
 80009ae:	bf00      	nop
 80009b0:	200001c8 	.word	0x200001c8

080009b4 <__malloc_lock>:
 80009b4:	4801      	ldr	r0, [pc, #4]	@ (80009bc <__malloc_lock+0x8>)
 80009b6:	f7ff bf0f 	b.w	80007d8 <__retarget_lock_acquire_recursive>
 80009ba:	bf00      	nop
 80009bc:	200001c0 	.word	0x200001c0

080009c0 <__malloc_unlock>:
 80009c0:	4801      	ldr	r0, [pc, #4]	@ (80009c8 <__malloc_unlock+0x8>)
 80009c2:	f7ff bf0a 	b.w	80007da <__retarget_lock_release_recursive>
 80009c6:	bf00      	nop
 80009c8:	200001c0 	.word	0x200001c0

080009cc <__ssputs_r>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	688e      	ldr	r6, [r1, #8]
 80009d2:	461f      	mov	r7, r3
 80009d4:	42be      	cmp	r6, r7
 80009d6:	680b      	ldr	r3, [r1, #0]
 80009d8:	4682      	mov	sl, r0
 80009da:	460c      	mov	r4, r1
 80009dc:	4690      	mov	r8, r2
 80009de:	d82d      	bhi.n	8000a3c <__ssputs_r+0x70>
 80009e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009e8:	d026      	beq.n	8000a38 <__ssputs_r+0x6c>
 80009ea:	6965      	ldr	r5, [r4, #20]
 80009ec:	6909      	ldr	r1, [r1, #16]
 80009ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009f2:	eba3 0901 	sub.w	r9, r3, r1
 80009f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009fa:	1c7b      	adds	r3, r7, #1
 80009fc:	444b      	add	r3, r9
 80009fe:	106d      	asrs	r5, r5, #1
 8000a00:	429d      	cmp	r5, r3
 8000a02:	bf38      	it	cc
 8000a04:	461d      	movcc	r5, r3
 8000a06:	0553      	lsls	r3, r2, #21
 8000a08:	d527      	bpl.n	8000a5a <__ssputs_r+0x8e>
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	f7ff ff52 	bl	80008b4 <_malloc_r>
 8000a10:	4606      	mov	r6, r0
 8000a12:	b360      	cbz	r0, 8000a6e <__ssputs_r+0xa2>
 8000a14:	6921      	ldr	r1, [r4, #16]
 8000a16:	464a      	mov	r2, r9
 8000a18:	f000 fae8 	bl	8000fec <memcpy>
 8000a1c:	89a3      	ldrh	r3, [r4, #12]
 8000a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a26:	81a3      	strh	r3, [r4, #12]
 8000a28:	6126      	str	r6, [r4, #16]
 8000a2a:	6165      	str	r5, [r4, #20]
 8000a2c:	444e      	add	r6, r9
 8000a2e:	eba5 0509 	sub.w	r5, r5, r9
 8000a32:	6026      	str	r6, [r4, #0]
 8000a34:	60a5      	str	r5, [r4, #8]
 8000a36:	463e      	mov	r6, r7
 8000a38:	42be      	cmp	r6, r7
 8000a3a:	d900      	bls.n	8000a3e <__ssputs_r+0x72>
 8000a3c:	463e      	mov	r6, r7
 8000a3e:	6820      	ldr	r0, [r4, #0]
 8000a40:	4632      	mov	r2, r6
 8000a42:	4641      	mov	r1, r8
 8000a44:	f000 faa8 	bl	8000f98 <memmove>
 8000a48:	68a3      	ldr	r3, [r4, #8]
 8000a4a:	1b9b      	subs	r3, r3, r6
 8000a4c:	60a3      	str	r3, [r4, #8]
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	4433      	add	r3, r6
 8000a52:	6023      	str	r3, [r4, #0]
 8000a54:	2000      	movs	r0, #0
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	462a      	mov	r2, r5
 8000a5c:	f000 fad4 	bl	8001008 <_realloc_r>
 8000a60:	4606      	mov	r6, r0
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d1e0      	bne.n	8000a28 <__ssputs_r+0x5c>
 8000a66:	6921      	ldr	r1, [r4, #16]
 8000a68:	4650      	mov	r0, sl
 8000a6a:	f7ff feb7 	bl	80007dc <_free_r>
 8000a6e:	230c      	movs	r3, #12
 8000a70:	f8ca 3000 	str.w	r3, [sl]
 8000a74:	89a3      	ldrh	r3, [r4, #12]
 8000a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7a:	81a3      	strh	r3, [r4, #12]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a80:	e7e9      	b.n	8000a56 <__ssputs_r+0x8a>
	...

08000a84 <_svfiprintf_r>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	4698      	mov	r8, r3
 8000a8a:	898b      	ldrh	r3, [r1, #12]
 8000a8c:	061b      	lsls	r3, r3, #24
 8000a8e:	b09d      	sub	sp, #116	@ 0x74
 8000a90:	4607      	mov	r7, r0
 8000a92:	460d      	mov	r5, r1
 8000a94:	4614      	mov	r4, r2
 8000a96:	d510      	bpl.n	8000aba <_svfiprintf_r+0x36>
 8000a98:	690b      	ldr	r3, [r1, #16]
 8000a9a:	b973      	cbnz	r3, 8000aba <_svfiprintf_r+0x36>
 8000a9c:	2140      	movs	r1, #64	@ 0x40
 8000a9e:	f7ff ff09 	bl	80008b4 <_malloc_r>
 8000aa2:	6028      	str	r0, [r5, #0]
 8000aa4:	6128      	str	r0, [r5, #16]
 8000aa6:	b930      	cbnz	r0, 8000ab6 <_svfiprintf_r+0x32>
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab0:	b01d      	add	sp, #116	@ 0x74
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	2340      	movs	r3, #64	@ 0x40
 8000ab8:	616b      	str	r3, [r5, #20]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000abe:	2320      	movs	r3, #32
 8000ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ac8:	2330      	movs	r3, #48	@ 0x30
 8000aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c68 <_svfiprintf_r+0x1e4>
 8000ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ad2:	f04f 0901 	mov.w	r9, #1
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	469a      	mov	sl, r3
 8000ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ade:	b10a      	cbz	r2, 8000ae4 <_svfiprintf_r+0x60>
 8000ae0:	2a25      	cmp	r2, #37	@ 0x25
 8000ae2:	d1f9      	bne.n	8000ad8 <_svfiprintf_r+0x54>
 8000ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ae8:	d00b      	beq.n	8000b02 <_svfiprintf_r+0x7e>
 8000aea:	465b      	mov	r3, fp
 8000aec:	4622      	mov	r2, r4
 8000aee:	4629      	mov	r1, r5
 8000af0:	4638      	mov	r0, r7
 8000af2:	f7ff ff6b 	bl	80009cc <__ssputs_r>
 8000af6:	3001      	adds	r0, #1
 8000af8:	f000 80a7 	beq.w	8000c4a <_svfiprintf_r+0x1c6>
 8000afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000afe:	445a      	add	r2, fp
 8000b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b02:	f89a 3000 	ldrb.w	r3, [sl]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 809f 	beq.w	8000c4a <_svfiprintf_r+0x1c6>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b16:	f10a 0a01 	add.w	sl, sl, #1
 8000b1a:	9304      	str	r3, [sp, #16]
 8000b1c:	9307      	str	r3, [sp, #28]
 8000b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b24:	4654      	mov	r4, sl
 8000b26:	2205      	movs	r2, #5
 8000b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b2c:	484e      	ldr	r0, [pc, #312]	@ (8000c68 <_svfiprintf_r+0x1e4>)
 8000b2e:	f7ff fb4f 	bl	80001d0 <memchr>
 8000b32:	9a04      	ldr	r2, [sp, #16]
 8000b34:	b9d8      	cbnz	r0, 8000b6e <_svfiprintf_r+0xea>
 8000b36:	06d0      	lsls	r0, r2, #27
 8000b38:	bf44      	itt	mi
 8000b3a:	2320      	movmi	r3, #32
 8000b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b40:	0711      	lsls	r1, r2, #28
 8000b42:	bf44      	itt	mi
 8000b44:	232b      	movmi	r3, #43	@ 0x2b
 8000b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b50:	d015      	beq.n	8000b7e <_svfiprintf_r+0xfa>
 8000b52:	9a07      	ldr	r2, [sp, #28]
 8000b54:	4654      	mov	r4, sl
 8000b56:	2000      	movs	r0, #0
 8000b58:	f04f 0c0a 	mov.w	ip, #10
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b62:	3b30      	subs	r3, #48	@ 0x30
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	d94b      	bls.n	8000c00 <_svfiprintf_r+0x17c>
 8000b68:	b1b0      	cbz	r0, 8000b98 <_svfiprintf_r+0x114>
 8000b6a:	9207      	str	r2, [sp, #28]
 8000b6c:	e014      	b.n	8000b98 <_svfiprintf_r+0x114>
 8000b6e:	eba0 0308 	sub.w	r3, r0, r8
 8000b72:	fa09 f303 	lsl.w	r3, r9, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	46a2      	mov	sl, r4
 8000b7c:	e7d2      	b.n	8000b24 <_svfiprintf_r+0xa0>
 8000b7e:	9b03      	ldr	r3, [sp, #12]
 8000b80:	1d19      	adds	r1, r3, #4
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	9103      	str	r1, [sp, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfbb      	ittet	lt
 8000b8a:	425b      	neglt	r3, r3
 8000b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b90:	9307      	strge	r3, [sp, #28]
 8000b92:	9307      	strlt	r3, [sp, #28]
 8000b94:	bfb8      	it	lt
 8000b96:	9204      	strlt	r2, [sp, #16]
 8000b98:	7823      	ldrb	r3, [r4, #0]
 8000b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b9c:	d10a      	bne.n	8000bb4 <_svfiprintf_r+0x130>
 8000b9e:	7863      	ldrb	r3, [r4, #1]
 8000ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba2:	d132      	bne.n	8000c0a <_svfiprintf_r+0x186>
 8000ba4:	9b03      	ldr	r3, [sp, #12]
 8000ba6:	1d1a      	adds	r2, r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	9203      	str	r2, [sp, #12]
 8000bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bb0:	3402      	adds	r4, #2
 8000bb2:	9305      	str	r3, [sp, #20]
 8000bb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000c6c <_svfiprintf_r+0x1e8>
 8000bb8:	7821      	ldrb	r1, [r4, #0]
 8000bba:	2203      	movs	r2, #3
 8000bbc:	4650      	mov	r0, sl
 8000bbe:	f7ff fb07 	bl	80001d0 <memchr>
 8000bc2:	b138      	cbz	r0, 8000bd4 <_svfiprintf_r+0x150>
 8000bc4:	9b04      	ldr	r3, [sp, #16]
 8000bc6:	eba0 000a 	sub.w	r0, r0, sl
 8000bca:	2240      	movs	r2, #64	@ 0x40
 8000bcc:	4082      	lsls	r2, r0
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	3401      	adds	r4, #1
 8000bd2:	9304      	str	r3, [sp, #16]
 8000bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bd8:	4825      	ldr	r0, [pc, #148]	@ (8000c70 <_svfiprintf_r+0x1ec>)
 8000bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bde:	2206      	movs	r2, #6
 8000be0:	f7ff faf6 	bl	80001d0 <memchr>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d036      	beq.n	8000c56 <_svfiprintf_r+0x1d2>
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <_svfiprintf_r+0x1f0>)
 8000bea:	bb1b      	cbnz	r3, 8000c34 <_svfiprintf_r+0x1b0>
 8000bec:	9b03      	ldr	r3, [sp, #12]
 8000bee:	3307      	adds	r3, #7
 8000bf0:	f023 0307 	bic.w	r3, r3, #7
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	9303      	str	r3, [sp, #12]
 8000bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bfa:	4433      	add	r3, r6
 8000bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bfe:	e76a      	b.n	8000ad6 <_svfiprintf_r+0x52>
 8000c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c04:	460c      	mov	r4, r1
 8000c06:	2001      	movs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <_svfiprintf_r+0xd8>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	3401      	adds	r4, #1
 8000c0e:	9305      	str	r3, [sp, #20]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 0c0a 	mov.w	ip, #10
 8000c16:	4620      	mov	r0, r4
 8000c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c1c:	3a30      	subs	r2, #48	@ 0x30
 8000c1e:	2a09      	cmp	r2, #9
 8000c20:	d903      	bls.n	8000c2a <_svfiprintf_r+0x1a6>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0c6      	beq.n	8000bb4 <_svfiprintf_r+0x130>
 8000c26:	9105      	str	r1, [sp, #20]
 8000c28:	e7c4      	b.n	8000bb4 <_svfiprintf_r+0x130>
 8000c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c2e:	4604      	mov	r4, r0
 8000c30:	2301      	movs	r3, #1
 8000c32:	e7f0      	b.n	8000c16 <_svfiprintf_r+0x192>
 8000c34:	ab03      	add	r3, sp, #12
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	462a      	mov	r2, r5
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <_svfiprintf_r+0x1f4>)
 8000c3c:	a904      	add	r1, sp, #16
 8000c3e:	4638      	mov	r0, r7
 8000c40:	f3af 8000 	nop.w
 8000c44:	1c42      	adds	r2, r0, #1
 8000c46:	4606      	mov	r6, r0
 8000c48:	d1d6      	bne.n	8000bf8 <_svfiprintf_r+0x174>
 8000c4a:	89ab      	ldrh	r3, [r5, #12]
 8000c4c:	065b      	lsls	r3, r3, #25
 8000c4e:	f53f af2d 	bmi.w	8000aac <_svfiprintf_r+0x28>
 8000c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c54:	e72c      	b.n	8000ab0 <_svfiprintf_r+0x2c>
 8000c56:	ab03      	add	r3, sp, #12
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	462a      	mov	r2, r5
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <_svfiprintf_r+0x1f4>)
 8000c5e:	a904      	add	r1, sp, #16
 8000c60:	4638      	mov	r0, r7
 8000c62:	f000 f879 	bl	8000d58 <_printf_i>
 8000c66:	e7ed      	b.n	8000c44 <_svfiprintf_r+0x1c0>
 8000c68:	0800109e 	.word	0x0800109e
 8000c6c:	080010a4 	.word	0x080010a4
 8000c70:	080010a8 	.word	0x080010a8
 8000c74:	00000000 	.word	0x00000000
 8000c78:	080009cd 	.word	0x080009cd

08000c7c <_printf_common>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	4616      	mov	r6, r2
 8000c82:	4698      	mov	r8, r3
 8000c84:	688a      	ldr	r2, [r1, #8]
 8000c86:	690b      	ldr	r3, [r1, #16]
 8000c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	bfb8      	it	lt
 8000c90:	4613      	movlt	r3, r2
 8000c92:	6033      	str	r3, [r6, #0]
 8000c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c98:	4607      	mov	r7, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	b10a      	cbz	r2, 8000ca2 <_printf_common+0x26>
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	6033      	str	r3, [r6, #0]
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	0699      	lsls	r1, r3, #26
 8000ca6:	bf42      	ittt	mi
 8000ca8:	6833      	ldrmi	r3, [r6, #0]
 8000caa:	3302      	addmi	r3, #2
 8000cac:	6033      	strmi	r3, [r6, #0]
 8000cae:	6825      	ldr	r5, [r4, #0]
 8000cb0:	f015 0506 	ands.w	r5, r5, #6
 8000cb4:	d106      	bne.n	8000cc4 <_printf_common+0x48>
 8000cb6:	f104 0a19 	add.w	sl, r4, #25
 8000cba:	68e3      	ldr	r3, [r4, #12]
 8000cbc:	6832      	ldr	r2, [r6, #0]
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	dc26      	bgt.n	8000d12 <_printf_common+0x96>
 8000cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cc8:	6822      	ldr	r2, [r4, #0]
 8000cca:	3b00      	subs	r3, #0
 8000ccc:	bf18      	it	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	0692      	lsls	r2, r2, #26
 8000cd2:	d42b      	bmi.n	8000d2c <_printf_common+0xb0>
 8000cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cd8:	4641      	mov	r1, r8
 8000cda:	4638      	mov	r0, r7
 8000cdc:	47c8      	blx	r9
 8000cde:	3001      	adds	r0, #1
 8000ce0:	d01e      	beq.n	8000d20 <_printf_common+0xa4>
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	6922      	ldr	r2, [r4, #16]
 8000ce6:	f003 0306 	and.w	r3, r3, #6
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf02      	ittt	eq
 8000cee:	68e5      	ldreq	r5, [r4, #12]
 8000cf0:	6833      	ldreq	r3, [r6, #0]
 8000cf2:	1aed      	subeq	r5, r5, r3
 8000cf4:	68a3      	ldr	r3, [r4, #8]
 8000cf6:	bf0c      	ite	eq
 8000cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cfc:	2500      	movne	r5, #0
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	bfc4      	itt	gt
 8000d02:	1a9b      	subgt	r3, r3, r2
 8000d04:	18ed      	addgt	r5, r5, r3
 8000d06:	2600      	movs	r6, #0
 8000d08:	341a      	adds	r4, #26
 8000d0a:	42b5      	cmp	r5, r6
 8000d0c:	d11a      	bne.n	8000d44 <_printf_common+0xc8>
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e008      	b.n	8000d24 <_printf_common+0xa8>
 8000d12:	2301      	movs	r3, #1
 8000d14:	4652      	mov	r2, sl
 8000d16:	4641      	mov	r1, r8
 8000d18:	4638      	mov	r0, r7
 8000d1a:	47c8      	blx	r9
 8000d1c:	3001      	adds	r0, #1
 8000d1e:	d103      	bne.n	8000d28 <_printf_common+0xac>
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d28:	3501      	adds	r5, #1
 8000d2a:	e7c6      	b.n	8000cba <_printf_common+0x3e>
 8000d2c:	18e1      	adds	r1, r4, r3
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	2030      	movs	r0, #48	@ 0x30
 8000d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d36:	4422      	add	r2, r4
 8000d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d40:	3302      	adds	r3, #2
 8000d42:	e7c7      	b.n	8000cd4 <_printf_common+0x58>
 8000d44:	2301      	movs	r3, #1
 8000d46:	4622      	mov	r2, r4
 8000d48:	4641      	mov	r1, r8
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	47c8      	blx	r9
 8000d4e:	3001      	adds	r0, #1
 8000d50:	d0e6      	beq.n	8000d20 <_printf_common+0xa4>
 8000d52:	3601      	adds	r6, #1
 8000d54:	e7d9      	b.n	8000d0a <_printf_common+0x8e>
	...

08000d58 <_printf_i>:
 8000d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	7e0f      	ldrb	r7, [r1, #24]
 8000d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d60:	2f78      	cmp	r7, #120	@ 0x78
 8000d62:	4691      	mov	r9, r2
 8000d64:	4680      	mov	r8, r0
 8000d66:	460c      	mov	r4, r1
 8000d68:	469a      	mov	sl, r3
 8000d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d6e:	d807      	bhi.n	8000d80 <_printf_i+0x28>
 8000d70:	2f62      	cmp	r7, #98	@ 0x62
 8000d72:	d80a      	bhi.n	8000d8a <_printf_i+0x32>
 8000d74:	2f00      	cmp	r7, #0
 8000d76:	f000 80d2 	beq.w	8000f1e <_printf_i+0x1c6>
 8000d7a:	2f58      	cmp	r7, #88	@ 0x58
 8000d7c:	f000 80b9 	beq.w	8000ef2 <_printf_i+0x19a>
 8000d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d88:	e03a      	b.n	8000e00 <_printf_i+0xa8>
 8000d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d8e:	2b15      	cmp	r3, #21
 8000d90:	d8f6      	bhi.n	8000d80 <_printf_i+0x28>
 8000d92:	a101      	add	r1, pc, #4	@ (adr r1, 8000d98 <_printf_i+0x40>)
 8000d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d98:	08000df1 	.word	0x08000df1
 8000d9c:	08000e05 	.word	0x08000e05
 8000da0:	08000d81 	.word	0x08000d81
 8000da4:	08000d81 	.word	0x08000d81
 8000da8:	08000d81 	.word	0x08000d81
 8000dac:	08000d81 	.word	0x08000d81
 8000db0:	08000e05 	.word	0x08000e05
 8000db4:	08000d81 	.word	0x08000d81
 8000db8:	08000d81 	.word	0x08000d81
 8000dbc:	08000d81 	.word	0x08000d81
 8000dc0:	08000d81 	.word	0x08000d81
 8000dc4:	08000f05 	.word	0x08000f05
 8000dc8:	08000e2f 	.word	0x08000e2f
 8000dcc:	08000ebf 	.word	0x08000ebf
 8000dd0:	08000d81 	.word	0x08000d81
 8000dd4:	08000d81 	.word	0x08000d81
 8000dd8:	08000f27 	.word	0x08000f27
 8000ddc:	08000d81 	.word	0x08000d81
 8000de0:	08000e2f 	.word	0x08000e2f
 8000de4:	08000d81 	.word	0x08000d81
 8000de8:	08000d81 	.word	0x08000d81
 8000dec:	08000ec7 	.word	0x08000ec7
 8000df0:	6833      	ldr	r3, [r6, #0]
 8000df2:	1d1a      	adds	r2, r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6032      	str	r2, [r6, #0]
 8000df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e00:	2301      	movs	r3, #1
 8000e02:	e09d      	b.n	8000f40 <_printf_i+0x1e8>
 8000e04:	6833      	ldr	r3, [r6, #0]
 8000e06:	6820      	ldr	r0, [r4, #0]
 8000e08:	1d19      	adds	r1, r3, #4
 8000e0a:	6031      	str	r1, [r6, #0]
 8000e0c:	0606      	lsls	r6, r0, #24
 8000e0e:	d501      	bpl.n	8000e14 <_printf_i+0xbc>
 8000e10:	681d      	ldr	r5, [r3, #0]
 8000e12:	e003      	b.n	8000e1c <_printf_i+0xc4>
 8000e14:	0645      	lsls	r5, r0, #25
 8000e16:	d5fb      	bpl.n	8000e10 <_printf_i+0xb8>
 8000e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	da03      	bge.n	8000e28 <_printf_i+0xd0>
 8000e20:	232d      	movs	r3, #45	@ 0x2d
 8000e22:	426d      	negs	r5, r5
 8000e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e28:	4859      	ldr	r0, [pc, #356]	@ (8000f90 <_printf_i+0x238>)
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	e011      	b.n	8000e52 <_printf_i+0xfa>
 8000e2e:	6821      	ldr	r1, [r4, #0]
 8000e30:	6833      	ldr	r3, [r6, #0]
 8000e32:	0608      	lsls	r0, r1, #24
 8000e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e38:	d402      	bmi.n	8000e40 <_printf_i+0xe8>
 8000e3a:	0649      	lsls	r1, r1, #25
 8000e3c:	bf48      	it	mi
 8000e3e:	b2ad      	uxthmi	r5, r5
 8000e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e42:	4853      	ldr	r0, [pc, #332]	@ (8000f90 <_printf_i+0x238>)
 8000e44:	6033      	str	r3, [r6, #0]
 8000e46:	bf14      	ite	ne
 8000e48:	230a      	movne	r3, #10
 8000e4a:	2308      	moveq	r3, #8
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e52:	6866      	ldr	r6, [r4, #4]
 8000e54:	60a6      	str	r6, [r4, #8]
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	bfa2      	ittt	ge
 8000e5a:	6821      	ldrge	r1, [r4, #0]
 8000e5c:	f021 0104 	bicge.w	r1, r1, #4
 8000e60:	6021      	strge	r1, [r4, #0]
 8000e62:	b90d      	cbnz	r5, 8000e68 <_printf_i+0x110>
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d04b      	beq.n	8000f00 <_printf_i+0x1a8>
 8000e68:	4616      	mov	r6, r2
 8000e6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e6e:	fb03 5711 	mls	r7, r3, r1, r5
 8000e72:	5dc7      	ldrb	r7, [r0, r7]
 8000e74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e78:	462f      	mov	r7, r5
 8000e7a:	42bb      	cmp	r3, r7
 8000e7c:	460d      	mov	r5, r1
 8000e7e:	d9f4      	bls.n	8000e6a <_printf_i+0x112>
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d10b      	bne.n	8000e9c <_printf_i+0x144>
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	07df      	lsls	r7, r3, #31
 8000e88:	d508      	bpl.n	8000e9c <_printf_i+0x144>
 8000e8a:	6923      	ldr	r3, [r4, #16]
 8000e8c:	6861      	ldr	r1, [r4, #4]
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	bfde      	ittt	le
 8000e92:	2330      	movle	r3, #48	@ 0x30
 8000e94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e98:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e9c:	1b92      	subs	r2, r2, r6
 8000e9e:	6122      	str	r2, [r4, #16]
 8000ea0:	f8cd a000 	str.w	sl, [sp]
 8000ea4:	464b      	mov	r3, r9
 8000ea6:	aa03      	add	r2, sp, #12
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	4640      	mov	r0, r8
 8000eac:	f7ff fee6 	bl	8000c7c <_printf_common>
 8000eb0:	3001      	adds	r0, #1
 8000eb2:	d14a      	bne.n	8000f4a <_printf_i+0x1f2>
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eb8:	b004      	add	sp, #16
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	4833      	ldr	r0, [pc, #204]	@ (8000f94 <_printf_i+0x23c>)
 8000ec8:	2778      	movs	r7, #120	@ 0x78
 8000eca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	6831      	ldr	r1, [r6, #0]
 8000ed2:	061f      	lsls	r7, r3, #24
 8000ed4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ed8:	d402      	bmi.n	8000ee0 <_printf_i+0x188>
 8000eda:	065f      	lsls	r7, r3, #25
 8000edc:	bf48      	it	mi
 8000ede:	b2ad      	uxthmi	r5, r5
 8000ee0:	6031      	str	r1, [r6, #0]
 8000ee2:	07d9      	lsls	r1, r3, #31
 8000ee4:	bf44      	itt	mi
 8000ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8000eea:	6023      	strmi	r3, [r4, #0]
 8000eec:	b11d      	cbz	r5, 8000ef6 <_printf_i+0x19e>
 8000eee:	2310      	movs	r3, #16
 8000ef0:	e7ac      	b.n	8000e4c <_printf_i+0xf4>
 8000ef2:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <_printf_i+0x238>)
 8000ef4:	e7e9      	b.n	8000eca <_printf_i+0x172>
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	f023 0320 	bic.w	r3, r3, #32
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	e7f6      	b.n	8000eee <_printf_i+0x196>
 8000f00:	4616      	mov	r6, r2
 8000f02:	e7bd      	b.n	8000e80 <_printf_i+0x128>
 8000f04:	6833      	ldr	r3, [r6, #0]
 8000f06:	6825      	ldr	r5, [r4, #0]
 8000f08:	6961      	ldr	r1, [r4, #20]
 8000f0a:	1d18      	adds	r0, r3, #4
 8000f0c:	6030      	str	r0, [r6, #0]
 8000f0e:	062e      	lsls	r6, r5, #24
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	d501      	bpl.n	8000f18 <_printf_i+0x1c0>
 8000f14:	6019      	str	r1, [r3, #0]
 8000f16:	e002      	b.n	8000f1e <_printf_i+0x1c6>
 8000f18:	0668      	lsls	r0, r5, #25
 8000f1a:	d5fb      	bpl.n	8000f14 <_printf_i+0x1bc>
 8000f1c:	8019      	strh	r1, [r3, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	6123      	str	r3, [r4, #16]
 8000f22:	4616      	mov	r6, r2
 8000f24:	e7bc      	b.n	8000ea0 <_printf_i+0x148>
 8000f26:	6833      	ldr	r3, [r6, #0]
 8000f28:	1d1a      	adds	r2, r3, #4
 8000f2a:	6032      	str	r2, [r6, #0]
 8000f2c:	681e      	ldr	r6, [r3, #0]
 8000f2e:	6862      	ldr	r2, [r4, #4]
 8000f30:	2100      	movs	r1, #0
 8000f32:	4630      	mov	r0, r6
 8000f34:	f7ff f94c 	bl	80001d0 <memchr>
 8000f38:	b108      	cbz	r0, 8000f3e <_printf_i+0x1e6>
 8000f3a:	1b80      	subs	r0, r0, r6
 8000f3c:	6060      	str	r0, [r4, #4]
 8000f3e:	6863      	ldr	r3, [r4, #4]
 8000f40:	6123      	str	r3, [r4, #16]
 8000f42:	2300      	movs	r3, #0
 8000f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f48:	e7aa      	b.n	8000ea0 <_printf_i+0x148>
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	4632      	mov	r2, r6
 8000f4e:	4649      	mov	r1, r9
 8000f50:	4640      	mov	r0, r8
 8000f52:	47d0      	blx	sl
 8000f54:	3001      	adds	r0, #1
 8000f56:	d0ad      	beq.n	8000eb4 <_printf_i+0x15c>
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	079b      	lsls	r3, r3, #30
 8000f5c:	d413      	bmi.n	8000f86 <_printf_i+0x22e>
 8000f5e:	68e0      	ldr	r0, [r4, #12]
 8000f60:	9b03      	ldr	r3, [sp, #12]
 8000f62:	4298      	cmp	r0, r3
 8000f64:	bfb8      	it	lt
 8000f66:	4618      	movlt	r0, r3
 8000f68:	e7a6      	b.n	8000eb8 <_printf_i+0x160>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4632      	mov	r2, r6
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4640      	mov	r0, r8
 8000f72:	47d0      	blx	sl
 8000f74:	3001      	adds	r0, #1
 8000f76:	d09d      	beq.n	8000eb4 <_printf_i+0x15c>
 8000f78:	3501      	adds	r5, #1
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	9903      	ldr	r1, [sp, #12]
 8000f7e:	1a5b      	subs	r3, r3, r1
 8000f80:	42ab      	cmp	r3, r5
 8000f82:	dcf2      	bgt.n	8000f6a <_printf_i+0x212>
 8000f84:	e7eb      	b.n	8000f5e <_printf_i+0x206>
 8000f86:	2500      	movs	r5, #0
 8000f88:	f104 0619 	add.w	r6, r4, #25
 8000f8c:	e7f5      	b.n	8000f7a <_printf_i+0x222>
 8000f8e:	bf00      	nop
 8000f90:	080010af 	.word	0x080010af
 8000f94:	080010c0 	.word	0x080010c0

08000f98 <memmove>:
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	b510      	push	{r4, lr}
 8000f9c:	eb01 0402 	add.w	r4, r1, r2
 8000fa0:	d902      	bls.n	8000fa8 <memmove+0x10>
 8000fa2:	4284      	cmp	r4, r0
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	d807      	bhi.n	8000fb8 <memmove+0x20>
 8000fa8:	1e43      	subs	r3, r0, #1
 8000faa:	42a1      	cmp	r1, r4
 8000fac:	d008      	beq.n	8000fc0 <memmove+0x28>
 8000fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fb6:	e7f8      	b.n	8000faa <memmove+0x12>
 8000fb8:	4402      	add	r2, r0
 8000fba:	4601      	mov	r1, r0
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d100      	bne.n	8000fc2 <memmove+0x2a>
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fca:	e7f7      	b.n	8000fbc <memmove+0x24>

08000fcc <_sbrk_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d06      	ldr	r5, [pc, #24]	@ (8000fe8 <_sbrk_r+0x1c>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	602b      	str	r3, [r5, #0]
 8000fd8:	f7ff fa34 	bl	8000444 <_sbrk>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d102      	bne.n	8000fe6 <_sbrk_r+0x1a>
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	b103      	cbz	r3, 8000fe6 <_sbrk_r+0x1a>
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
 8000fe8:	200001bc 	.word	0x200001bc

08000fec <memcpy>:
 8000fec:	440a      	add	r2, r1
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000ff4:	d100      	bne.n	8000ff8 <memcpy+0xc>
 8000ff6:	4770      	bx	lr
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001002:	4291      	cmp	r1, r2
 8001004:	d1f9      	bne.n	8000ffa <memcpy+0xe>
 8001006:	bd10      	pop	{r4, pc}

08001008 <_realloc_r>:
 8001008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100c:	4680      	mov	r8, r0
 800100e:	4615      	mov	r5, r2
 8001010:	460c      	mov	r4, r1
 8001012:	b921      	cbnz	r1, 800101e <_realloc_r+0x16>
 8001014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001018:	4611      	mov	r1, r2
 800101a:	f7ff bc4b 	b.w	80008b4 <_malloc_r>
 800101e:	b92a      	cbnz	r2, 800102c <_realloc_r+0x24>
 8001020:	f7ff fbdc 	bl	80007dc <_free_r>
 8001024:	2400      	movs	r4, #0
 8001026:	4620      	mov	r0, r4
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800102c:	f000 f81a 	bl	8001064 <_malloc_usable_size_r>
 8001030:	4285      	cmp	r5, r0
 8001032:	4606      	mov	r6, r0
 8001034:	d802      	bhi.n	800103c <_realloc_r+0x34>
 8001036:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800103a:	d8f4      	bhi.n	8001026 <_realloc_r+0x1e>
 800103c:	4629      	mov	r1, r5
 800103e:	4640      	mov	r0, r8
 8001040:	f7ff fc38 	bl	80008b4 <_malloc_r>
 8001044:	4607      	mov	r7, r0
 8001046:	2800      	cmp	r0, #0
 8001048:	d0ec      	beq.n	8001024 <_realloc_r+0x1c>
 800104a:	42b5      	cmp	r5, r6
 800104c:	462a      	mov	r2, r5
 800104e:	4621      	mov	r1, r4
 8001050:	bf28      	it	cs
 8001052:	4632      	movcs	r2, r6
 8001054:	f7ff ffca 	bl	8000fec <memcpy>
 8001058:	4621      	mov	r1, r4
 800105a:	4640      	mov	r0, r8
 800105c:	f7ff fbbe 	bl	80007dc <_free_r>
 8001060:	463c      	mov	r4, r7
 8001062:	e7e0      	b.n	8001026 <_realloc_r+0x1e>

08001064 <_malloc_usable_size_r>:
 8001064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001068:	1f18      	subs	r0, r3, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	bfbc      	itt	lt
 800106e:	580b      	ldrlt	r3, [r1, r0]
 8001070:	18c0      	addlt	r0, r0, r3
 8001072:	4770      	bx	lr

08001074 <_init>:
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	bf00      	nop
 8001078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107a:	bc08      	pop	{r3}
 800107c:	469e      	mov	lr, r3
 800107e:	4770      	bx	lr

08001080 <_fini>:
 8001080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001082:	bf00      	nop
 8001084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001086:	bc08      	pop	{r3}
 8001088:	469e      	mov	lr, r3
 800108a:	4770      	bx	lr
